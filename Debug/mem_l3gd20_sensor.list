
mem_l3gd20_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001280  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001430  08001430  00011430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001434  08001434  00011434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08001438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          000000d0  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000f0  200000f0  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006970  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012de  00000000  00000000  000269c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007e0  00000000  00000000  00027ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000728  00000000  00000000  00028480  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002d08  00000000  00000000  00028ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ad0  00000000  00000000  0002b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e380  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000020f4  00000000  00000000  0002e3fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013f0 	.word	0x080013f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080013f0 	.word	0x080013f0

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e076      	b.n	80004f6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000408:	2201      	movs	r2, #1
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d165      	bne.n	80004f0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	2103      	movs	r1, #3
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d003      	beq.n	8000462 <GPIO_Init+0x76>
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d12e      	bne.n	80004c0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	2103      	movs	r1, #3
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	401a      	ands	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	4619      	mov	r1, r3
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b29b      	uxth	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	2301      	movs	r3, #1
 800049c:	408b      	lsls	r3, r1
 800049e:	43db      	mvns	r3, r3
 80004a0:	401a      	ands	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	7992      	ldrb	r2, [r2, #6]
 80004ae:	4611      	mov	r1, r2
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	b292      	uxth	r2, r2
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	2103      	movs	r1, #3
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	401a      	ands	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	79db      	ldrb	r3, [r3, #7]
 80004e0:	4619      	mov	r1, r3
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d985      	bls.n	8000408 <GPIO_Init+0x1c>
    }
  }
}
 80004fc:	bf00      	nop
 80004fe:	371c      	adds	r7, #28
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	887a      	ldrh	r2, [r7, #2]
 8000518:	831a      	strh	r2, [r3, #24]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	887a      	ldrh	r2, [r7, #2]
 8000536:	835a      	strh	r2, [r3, #26]
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
 8000550:	4613      	mov	r3, r2
 8000552:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800055c:	787a      	ldrb	r2, [r7, #1]
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	f003 0307 	and.w	r3, r3, #7
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800056c:	887b      	ldrh	r3, [r7, #2]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	b29b      	uxth	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	b29b      	uxth	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3208      	adds	r2, #8
 8000580:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	210f      	movs	r1, #15
 800058e:	fa01 f303 	lsl.w	r3, r1, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	ea02 0103 	and.w	r1, r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f100 0208 	add.w	r2, r0, #8
 800059e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80005a2:	887b      	ldrh	r3, [r7, #2]
 80005a4:	08db      	lsrs	r3, r3, #3
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3208      	adds	r2, #8
 80005ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3208      	adds	r2, #8
 80005c4:	68b9      	ldr	r1, [r7, #8]
 80005c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005d8:	b480      	push	{r7}
 80005da:	b089      	sub	sp, #36	; 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	2302      	movs	r3, #2
 80005f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005f8:	4b47      	ldr	r3, [pc, #284]	; (8000718 <RCC_GetClocksFreq+0x140>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f003 030c 	and.w	r3, r3, #12
 8000600:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	2b04      	cmp	r3, #4
 8000606:	d007      	beq.n	8000618 <RCC_GetClocksFreq+0x40>
 8000608:	2b08      	cmp	r3, #8
 800060a:	d009      	beq.n	8000620 <RCC_GetClocksFreq+0x48>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d13d      	bne.n	800068c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a42      	ldr	r2, [pc, #264]	; (800071c <RCC_GetClocksFreq+0x144>)
 8000614:	601a      	str	r2, [r3, #0]
      break;
 8000616:	e03d      	b.n	8000694 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a41      	ldr	r2, [pc, #260]	; (8000720 <RCC_GetClocksFreq+0x148>)
 800061c:	601a      	str	r2, [r3, #0]
      break;
 800061e:	e039      	b.n	8000694 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000620:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <RCC_GetClocksFreq+0x140>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	0d9b      	lsrs	r3, r3, #22
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800062c:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <RCC_GetClocksFreq+0x140>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000634:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00c      	beq.n	8000656 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800063c:	4a38      	ldr	r2, [pc, #224]	; (8000720 <RCC_GetClocksFreq+0x148>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	fbb2 f3f3 	udiv	r3, r2, r3
 8000644:	4a34      	ldr	r2, [pc, #208]	; (8000718 <RCC_GetClocksFreq+0x140>)
 8000646:	6852      	ldr	r2, [r2, #4]
 8000648:	0992      	lsrs	r2, r2, #6
 800064a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800064e:	fb02 f303 	mul.w	r3, r2, r3
 8000652:	61fb      	str	r3, [r7, #28]
 8000654:	e00b      	b.n	800066e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000656:	4a31      	ldr	r2, [pc, #196]	; (800071c <RCC_GetClocksFreq+0x144>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4a2e      	ldr	r2, [pc, #184]	; (8000718 <RCC_GetClocksFreq+0x140>)
 8000660:	6852      	ldr	r2, [r2, #4]
 8000662:	0992      	lsrs	r2, r2, #6
 8000664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <RCC_GetClocksFreq+0x140>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	f003 0303 	and.w	r3, r3, #3
 8000678:	3301      	adds	r3, #1
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800067e:	69fa      	ldr	r2, [r7, #28]
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	fbb2 f2f3 	udiv	r2, r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
      break;
 800068a:	e003      	b.n	8000694 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <RCC_GetClocksFreq+0x144>)
 8000690:	601a      	str	r2, [r3, #0]
      break;
 8000692:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <RCC_GetClocksFreq+0x140>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800069c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	091b      	lsrs	r3, r3, #4
 80006a2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006a4:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <RCC_GetClocksFreq+0x14c>)
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	40da      	lsrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <RCC_GetClocksFreq+0x140>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	0a9b      	lsrs	r3, r3, #10
 80006ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <RCC_GetClocksFreq+0x14c>)
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	685a      	ldr	r2, [r3, #4]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	40da      	lsrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <RCC_GetClocksFreq+0x140>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006ec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	0b5b      	lsrs	r3, r3, #13
 80006f2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <RCC_GetClocksFreq+0x14c>)
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	40da      	lsrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	60da      	str	r2, [r3, #12]
}
 800070c:	bf00      	nop
 800070e:	3724      	adds	r7, #36	; 0x24
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40023800 	.word	0x40023800
 800071c:	00f42400 	.word	0x00f42400
 8000720:	007a1200 	.word	0x007a1200
 8000724:	20000000 	.word	0x20000000

08000728 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800073a:	490a      	ldr	r1, [pc, #40]	; (8000764 <RCC_AHB1PeriphClockCmd+0x3c>)
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <RCC_AHB1PeriphClockCmd+0x3c>)
 800073e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4313      	orrs	r3, r2
 8000744:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000746:	e006      	b.n	8000756 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000748:	4906      	ldr	r1, [pc, #24]	; (8000764 <RCC_AHB1PeriphClockCmd+0x3c>)
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <RCC_AHB1PeriphClockCmd+0x3c>)
 800074c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	43db      	mvns	r3, r3
 8000752:	4013      	ands	r3, r2
 8000754:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800077a:	490a      	ldr	r1, [pc, #40]	; (80007a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800077e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000786:	e006      	b.n	8000796 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000788:	4906      	ldr	r1, [pc, #24]	; (80007a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800078c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	43db      	mvns	r3, r3
 8000792:	4013      	ands	r3, r2
 8000794:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80007bc:	89fb      	ldrh	r3, [r7, #14]
 80007be:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80007c2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	881a      	ldrh	r2, [r3, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	885b      	ldrh	r3, [r3, #2]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007dc:	4313      	orrs	r3, r2
 80007de:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007f4:	4313      	orrs	r3, r2
 80007f6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b29a      	uxth	r2, r3
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	4313      	orrs	r3, r2
 8000804:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	89fa      	ldrh	r2, [r7, #14]
 800080a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	8b9b      	ldrh	r3, [r3, #28]
 8000810:	b29b      	uxth	r3, r3
 8000812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000816:	b29a      	uxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	8a1a      	ldrh	r2, [r3, #16]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	821a      	strh	r2, [r3, #16]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d008      	beq.n	8000854 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084c:	b29a      	uxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000852:	e007      	b.n	8000864 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800085e:	b29a      	uxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	801a      	strh	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	899b      	ldrh	r3, [r3, #12]
 800087c:	b29b      	uxth	r3, r3
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	460b      	mov	r3, r1
 8000894:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	887a      	ldrh	r2, [r7, #2]
 800089a:	819a      	strh	r2, [r3, #12]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	891b      	ldrh	r3, [r3, #8]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	4013      	ands	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e001      	b.n	80008d2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	8a1b      	ldrh	r3, [r3, #16]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000908:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	88db      	ldrh	r3, [r3, #6]
 800090e:	461a      	mov	r2, r3
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	4313      	orrs	r3, r2
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	b29a      	uxth	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	899b      	ldrh	r3, [r3, #12]
 8000922:	b29b      	uxth	r3, r3
 8000924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800092c:	f023 030c 	bic.w	r3, r3, #12
 8000930:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	889a      	ldrh	r2, [r3, #4]
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	891b      	ldrh	r3, [r3, #8]
 800093a:	4313      	orrs	r3, r2
 800093c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000942:	4313      	orrs	r3, r2
 8000944:	b29b      	uxth	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	4313      	orrs	r3, r2
 800094c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	8a9b      	ldrh	r3, [r3, #20]
 800095a:	b29b      	uxth	r3, r3
 800095c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000964:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	899b      	ldrh	r3, [r3, #12]
 800096a:	461a      	mov	r2, r3
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	4313      	orrs	r3, r2
 8000970:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe2a 	bl	80005d8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a30      	ldr	r2, [pc, #192]	; (8000a48 <USART_Init+0x168>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d003      	beq.n	8000994 <USART_Init+0xb4>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <USART_Init+0x16c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d102      	bne.n	800099a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	623b      	str	r3, [r7, #32]
 8000998:	e001      	b.n	800099e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	899b      	ldrh	r3, [r3, #12]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da0c      	bge.n	80009c4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80009aa:	6a3a      	ldr	r2, [r7, #32]
 80009ac:	4613      	mov	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	009a      	lsls	r2, r3, #2
 80009b4:	441a      	add	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	e00b      	b.n	80009dc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80009c4:	6a3a      	ldr	r2, [r7, #32]
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	009a      	lsls	r2, r3, #2
 80009ce:	441a      	add	r2, r3
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <USART_Init+0x170>)
 80009e0:	fba2 2303 	umull	r2, r3, r2, r3
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	011b      	lsls	r3, r3, #4
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	091b      	lsrs	r3, r3, #4
 80009ee:	2264      	movs	r2, #100	; 0x64
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	69fa      	ldr	r2, [r7, #28]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	899b      	ldrh	r3, [r3, #12]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da0c      	bge.n	8000a20 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	3332      	adds	r3, #50	; 0x32
 8000a0c:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <USART_Init+0x170>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1e:	e00b      	b.n	8000a38 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	3332      	adds	r3, #50	; 0x32
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <USART_Init+0x170>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	095b      	lsrs	r3, r3, #5
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a34:	4313      	orrs	r3, r2
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	811a      	strh	r2, [r3, #8]
}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	40011400 	.word	0x40011400
 8000a50:	51eb851f 	.word	0x51eb851f

08000a54 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d008      	beq.n	8000a78 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	899b      	ldrh	r3, [r3, #12]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a76:	e007      	b.n	8000a88 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	899b      	ldrh	r3, [r3, #12]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	819a      	strh	r2, [r3, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	809a      	strh	r2, [r3, #4]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000abc:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <Audio_MAL_IRQHandler+0xe8>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <Audio_MAL_IRQHandler+0xec>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	f7ff fc26 	bl	8000318 <DMA_GetFlagStatus>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d064      	beq.n	8000b9c <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000ad2:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <Audio_MAL_IRQHandler+0xf0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d04c      	beq.n	8000b74 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000ada:	bf00      	nop
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <Audio_MAL_IRQHandler+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fc01 	bl	80002e8 <DMA_GetCmdStatus>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1f7      	bne.n	8000adc <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <Audio_MAL_IRQHandler+0xe8>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <Audio_MAL_IRQHandler+0xec>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4610      	mov	r0, r2
 8000af8:	f7ff fc4a 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <Audio_MAL_IRQHandler+0xf4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <Audio_MAL_IRQHandler+0xf8>)
 8000b04:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <Audio_MAL_IRQHandler+0xf0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	bf28      	it	cs
 8000b12:	4613      	movcs	r3, r2
 8000b14:	4a26      	ldr	r2, [pc, #152]	; (8000bb0 <Audio_MAL_IRQHandler+0xf8>)
 8000b16:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <Audio_MAL_IRQHandler+0xe8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4924      	ldr	r1, [pc, #144]	; (8000bb0 <Audio_MAL_IRQHandler+0xf8>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb6e 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <Audio_MAL_IRQHandler+0xe8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fbc0 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <Audio_MAL_IRQHandler+0xf4>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <Audio_MAL_IRQHandler+0xf0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b3c:	d203      	bcs.n	8000b46 <Audio_MAL_IRQHandler+0x8e>
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <Audio_MAL_IRQHandler+0xf0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	e000      	b.n	8000b48 <Audio_MAL_IRQHandler+0x90>
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <Audio_MAL_IRQHandler+0xfc>)
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a18      	ldr	r2, [pc, #96]	; (8000bac <Audio_MAL_IRQHandler+0xf4>)
 8000b4c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <Audio_MAL_IRQHandler+0xf0>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <Audio_MAL_IRQHandler+0xf0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	bf28      	it	cs
 8000b5e:	460b      	movcs	r3, r1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <Audio_MAL_IRQHandler+0xf0>)
 8000b64:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <Audio_MAL_IRQHandler+0xe8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fb9f 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000b72:	e013      	b.n	8000b9c <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <Audio_MAL_IRQHandler+0xe8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fb98 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <Audio_MAL_IRQHandler+0xe8>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <Audio_MAL_IRQHandler+0xec>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	f7ff fc00 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <Audio_MAL_IRQHandler+0xf4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f9f2 	bl	8000f80 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000018 	.word	0x20000018
 8000ba4:	2000001c 	.word	0x2000001c
 8000ba8:	20000010 	.word	0x20000010
 8000bac:	2000003c 	.word	0x2000003c
 8000bb0:	2000007c 	.word	0x2000007c
 8000bb4:	0001fffe 	.word	0x0001fffe

08000bb8 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000bbc:	f7ff ff7c 	bl	8000ab8 <Audio_MAL_IRQHandler>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000bc8:	f7ff ff76 	bl	8000ab8 <Audio_MAL_IRQHandler>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <SPI3_IRQHandler+0x3c>)
 8000bd8:	f7ff fe66 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d011      	beq.n	8000c06 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <SPI3_IRQHandler+0x40>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d106      	bne.n	8000bf8 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000bea:	f000 f9d4 	bl	8000f96 <EVAL_AUDIO_GetSampleCallBack>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f7ff fae8 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000bf8:	f000 f9cd 	bl	8000f96 <EVAL_AUDIO_GetSampleCallBack>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <SPI3_IRQHandler+0x3c>)
 8000c02:	f7ff fe42 	bl	800088a <SPI_I2S_SendData>
  }
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40003c00 	.word	0x40003c00
 8000c10:	20000014 	.word	0x20000014

08000c14 <delay>:
uint16_t x_data , y_data , z_data;
uint32_t i=32;


void delay(__IO uint32_t nCount)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	while(nCount--)
 8000c1c:	bf00      	nop
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1fa      	bne.n	8000c1e <delay+0xa>
	{

	}
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <USART_Puts>:


void USART_Puts(USART_TypeDef* USARTx , volatile char *s)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	while(*s)
 8000c3e:	e00e      	b.n	8000c5e <USART_Puts+0x2a>
	{
		while(!USARTx ->SR & 0x00000040);
 8000c40:	bf00      	nop
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	881b      	ldrh	r3, [r3, #0]
		USART_SendData(USARTx , *s);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff1f 	bl	8000a94 <USART_SendData>
		*s++;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	603a      	str	r2, [r7, #0]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
	while(*s)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1eb      	bne.n	8000c40 <USART_Puts+0xc>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <usart_init>:

void usart_init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStruct;
	USART_InitTypeDef 	USART_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8000c76:	2101      	movs	r1, #1
 8000c78:	2010      	movs	r0, #16
 8000c7a:	f7ff fd75 	bl	8000768 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff fd51 	bl	8000728 <RCC_AHB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
 8000c86:	2207      	movs	r2, #7
 8000c88:	2109      	movs	r1, #9
 8000c8a:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <usart_init+0x78>)
 8000c8c:	f7ff fc5a 	bl	8000544 <GPIO_PinAFConfig>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000c90:	2302      	movs	r3, #2
 8000c92:	753b      	strb	r3, [r7, #20]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000c94:	2300      	movs	r3, #0
 8000c96:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9;
 8000c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4619      	mov	r1, r3
 8000cac:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <usart_init+0x78>)
 8000cae:	f7ff fb9d 	bl	80003ec <GPIO_Init>

	USART_InitStruct.USART_BaudRate = 115200;
 8000cb2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cb6:	603b      	str	r3, [r7, #0]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_Mode = USART_Mode_Tx;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	813b      	strh	r3, [r7, #8]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	80fb      	strh	r3, [r7, #6]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	80bb      	strh	r3, [r7, #4]
	USART_Init(USART1,&USART_InitStruct);
 8000ccc:	463b      	mov	r3, r7
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <usart_init+0x7c>)
 8000cd2:	f7ff fe05 	bl	80008e0 <USART_Init>
	USART_Cmd(USART1,ENABLE);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <usart_init+0x7c>)
 8000cda:	f7ff febb 	bl	8000a54 <USART_Cmd>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40011000 	.word	0x40011000

08000cf0 <gpio_init>:

void gpio_init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
	SPI_InitTypeDef 	SPI_InitTypeDefStruct;
	GPIO_InitTypeDef	GPIO_InitTypeDefStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI5,ENABLE);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000cfc:	f7ff fd34 	bl	8000768 <RCC_APB2PeriphClockCmd>

	SPI_InitTypeDefStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000d00:	2300      	movs	r3, #0
 8000d02:	833b      	strh	r3, [r7, #24]
	SPI_InitTypeDefStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000d04:	2300      	movs	r3, #0
 8000d06:	81bb      	strh	r3, [r7, #12]
	SPI_InitTypeDefStruct.SPI_Mode = SPI_Mode_Master;
 8000d08:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d0c:	81fb      	strh	r3, [r7, #14]
	SPI_InitTypeDefStruct.SPI_DataSize = SPI_DataSize_8b;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	823b      	strh	r3, [r7, #16]
	SPI_InitTypeDefStruct.SPI_NSS = SPI_NSS_Soft;
 8000d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d16:	82fb      	strh	r3, [r7, #22]
	SPI_InitTypeDefStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	837b      	strh	r3, [r7, #26]
	SPI_InitTypeDefStruct.SPI_CPOL = SPI_CPOL_High;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	827b      	strh	r3, [r7, #18]
	SPI_InitTypeDefStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8000d20:	2301      	movs	r3, #1
 8000d22:	82bb      	strh	r3, [r7, #20]
	SPI_Init(SPI5,&SPI_InitTypeDefStruct);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4820      	ldr	r0, [pc, #128]	; (8000dac <gpio_init+0xbc>)
 8000d2c:	f7ff fd3c 	bl	80007a8 <SPI_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOC , ENABLE);
 8000d30:	2101      	movs	r1, #1
 8000d32:	2024      	movs	r0, #36	; 0x24
 8000d34:	f7ff fcf8 	bl	8000728 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDefStruct.GPIO_Mode = GPIO_Mode_AF;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	723b      	strb	r3, [r7, #8]
	GPIO_InitTypeDefStruct.GPIO_OType = GPIO_OType_PP;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDefStruct.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
 8000d40:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d44:	607b      	str	r3, [r7, #4]
	GPIO_InitTypeDefStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	72fb      	strb	r3, [r7, #11]
	GPIO_InitTypeDefStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	727b      	strb	r3, [r7, #9]
	GPIO_Init(GPIOF,&GPIO_InitTypeDefStruct);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <gpio_init+0xc0>)
 8000d54:	f7ff fb4a 	bl	80003ec <GPIO_Init>

	GPIO_InitTypeDefStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	723b      	strb	r3, [r7, #8]
	GPIO_InitTypeDefStruct.GPIO_OType = GPIO_OType_PP;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDefStruct.GPIO_Pin = GPIO_Pin_1;
 8000d60:	2302      	movs	r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
	GPIO_InitTypeDefStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	72fb      	strb	r3, [r7, #11]
	GPIO_InitTypeDefStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	727b      	strb	r3, [r7, #9]
	GPIO_Init(GPIOC,&GPIO_InitTypeDefStruct);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <gpio_init+0xc4>)
 8000d72:	f7ff fb3b 	bl	80003ec <GPIO_Init>

	GPIO_PinAFConfig(GPIOF,GPIO_PinSource7,GPIO_AF_SPI5);
 8000d76:	2205      	movs	r2, #5
 8000d78:	2107      	movs	r1, #7
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <gpio_init+0xc0>)
 8000d7c:	f7ff fbe2 	bl	8000544 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource8,GPIO_AF_SPI5);
 8000d80:	2205      	movs	r2, #5
 8000d82:	2108      	movs	r1, #8
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <gpio_init+0xc0>)
 8000d86:	f7ff fbdd 	bl	8000544 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource9,GPIO_AF_SPI5);
 8000d8a:	2205      	movs	r2, #5
 8000d8c:	2109      	movs	r1, #9
 8000d8e:	4808      	ldr	r0, [pc, #32]	; (8000db0 <gpio_init+0xc0>)
 8000d90:	f7ff fbd8 	bl	8000544 <GPIO_PinAFConfig>
	GPIO_SetBits(GPIOC,GPIO_Pin_1);
 8000d94:	2102      	movs	r1, #2
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <gpio_init+0xc4>)
 8000d98:	f7ff fbb6 	bl	8000508 <GPIO_SetBits>
	SPI_Cmd(SPI5 , ENABLE);
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <gpio_init+0xbc>)
 8000da0:	f7ff fd46 	bl	8000830 <SPI_Cmd>
}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40015000 	.word	0x40015000
 8000db0:	40021400 	.word	0x40021400
 8000db4:	40020800 	.word	0x40020800

08000db8 <spi_yaz>:

void spi_yaz(uint8_t adress , uint8_t data)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	71bb      	strb	r3, [r7, #6]
	adress = 0x00 | adress;
	GPIO_ResetBits(GPIOC , GPIO_Pin_1);
 8000dc8:	2102      	movs	r1, #2
 8000dca:	481e      	ldr	r0, [pc, #120]	; (8000e44 <spi_yaz+0x8c>)
 8000dcc:	f7ff fbab 	bl	8000526 <GPIO_ResetBits>

	while(!SPI_I2S_GetFlagStatus(SPI5,SPI_I2S_FLAG_TXE));
 8000dd0:	bf00      	nop
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <spi_yaz+0x90>)
 8000dd6:	f7ff fd67 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f8      	beq.n	8000dd2 <spi_yaz+0x1a>
	SPI_I2S_SendData(SPI5,adress);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	4818      	ldr	r0, [pc, #96]	; (8000e48 <spi_yaz+0x90>)
 8000de8:	f7ff fd4f 	bl	800088a <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI5,SPI_I2S_FLAG_RXNE));
 8000dec:	bf00      	nop
 8000dee:	2101      	movs	r1, #1
 8000df0:	4815      	ldr	r0, [pc, #84]	; (8000e48 <spi_yaz+0x90>)
 8000df2:	f7ff fd59 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f8      	beq.n	8000dee <spi_yaz+0x36>
	SPI_I2S_ReceiveData(SPI5);
 8000dfc:	4812      	ldr	r0, [pc, #72]	; (8000e48 <spi_yaz+0x90>)
 8000dfe:	f7ff fd37 	bl	8000870 <SPI_I2S_ReceiveData>
	while(!SPI_I2S_GetFlagStatus(SPI5,SPI_I2S_FLAG_TXE));
 8000e02:	bf00      	nop
 8000e04:	2102      	movs	r1, #2
 8000e06:	4810      	ldr	r0, [pc, #64]	; (8000e48 <spi_yaz+0x90>)
 8000e08:	f7ff fd4e 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f8      	beq.n	8000e04 <spi_yaz+0x4c>
	SPI_I2S_SendData(SPI5,adress);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <spi_yaz+0x90>)
 8000e1a:	f7ff fd36 	bl	800088a <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI5,SPI_I2S_FLAG_RXNE));
 8000e1e:	bf00      	nop
 8000e20:	2101      	movs	r1, #1
 8000e22:	4809      	ldr	r0, [pc, #36]	; (8000e48 <spi_yaz+0x90>)
 8000e24:	f7ff fd40 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f8      	beq.n	8000e20 <spi_yaz+0x68>
	SPI_I2S_ReceiveData(SPI5);
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <spi_yaz+0x90>)
 8000e30:	f7ff fd1e 	bl	8000870 <SPI_I2S_ReceiveData>

	GPIO_SetBits(GPIOC,GPIO_Pin_1);
 8000e34:	2102      	movs	r1, #2
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <spi_yaz+0x8c>)
 8000e38:	f7ff fb66 	bl	8000508 <GPIO_SetBits>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40015000 	.word	0x40015000

08000e4c <spi_oku>:

uint8_t spi_oku(uint8_t adress)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	GPIO_ResetBits(GPIOC , GPIO_Pin_1);
 8000e56:	2102      	movs	r1, #2
 8000e58:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <spi_oku+0xa4>)
 8000e5a:	f7ff fb64 	bl	8000526 <GPIO_ResetBits>

	adress = 0X08 | adress;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	71fb      	strb	r3, [r7, #7]
	while(!SPI_I2S_GetFlagStatus(SPI5,SPI_I2S_FLAG_TXE));
 8000e66:	bf00      	nop
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <spi_oku+0xa8>)
 8000e6c:	f7ff fd1c 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f8      	beq.n	8000e68 <spi_oku+0x1c>
	SPI_I2S_SendData(SPI5,adress);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <spi_oku+0xa8>)
 8000e7e:	f7ff fd04 	bl	800088a <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI5,SPI_I2S_FLAG_RXNE));
 8000e82:	bf00      	nop
 8000e84:	2101      	movs	r1, #1
 8000e86:	481b      	ldr	r0, [pc, #108]	; (8000ef4 <spi_oku+0xa8>)
 8000e88:	f7ff fd0e 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f8      	beq.n	8000e84 <spi_oku+0x38>
	SPI_I2S_SendData(SPI5,adress);
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4619      	mov	r1, r3
 8000e98:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <spi_oku+0xa8>)
 8000e9a:	f7ff fcf6 	bl	800088a <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI5,SPI_I2S_FLAG_TXE));
 8000e9e:	bf00      	nop
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <spi_oku+0xa8>)
 8000ea4:	f7ff fd00 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f8      	beq.n	8000ea0 <spi_oku+0x54>
	SPI_I2S_SendData(SPI5,adress);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <spi_oku+0xa8>)
 8000eb6:	f7ff fce8 	bl	800088a <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI5,SPI_I2S_FLAG_RXNE));
 8000eba:	bf00      	nop
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <spi_oku+0xa8>)
 8000ec0:	f7ff fcf2 	bl	80008a8 <SPI_I2S_GetFlagStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f8      	beq.n	8000ebc <spi_oku+0x70>
	SPI_I2S_SendData(SPI5,adress);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <spi_oku+0xa8>)
 8000ed2:	f7ff fcda 	bl	800088a <SPI_I2S_SendData>

	GPIO_SetBits(GPIOC,GPIO_Pin_1);
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <spi_oku+0xa4>)
 8000eda:	f7ff fb15 	bl	8000508 <GPIO_SetBits>
	return SPI_I2S_ReceiveData(SPI5);
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <spi_oku+0xa8>)
 8000ee0:	f7ff fcc6 	bl	8000870 <SPI_I2S_ReceiveData>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b2db      	uxtb	r3, r3
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40015000 	.word	0x40015000

08000ef8 <main>:

int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af02      	add	r7, sp, #8

	gpio_init();
 8000efe:	f7ff fef7 	bl	8000cf0 <gpio_init>
	usart_init();
 8000f02:	f7ff feb5 	bl	8000c70 <usart_init>
	spi_yaz(0x20 , 0x0F);
 8000f06:	210f      	movs	r1, #15
 8000f08:	2020      	movs	r0, #32
 8000f0a:	f7ff ff55 	bl	8000db8 <spi_yaz>

  while (1)
  {
	  x_data = spi_oku(0x28);
 8000f0e:	2028      	movs	r0, #40	; 0x28
 8000f10:	f7ff ff9c 	bl	8000e4c <spi_oku>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <main+0x6c>)
 8000f1a:	801a      	strh	r2, [r3, #0]
	  y_data = spi_oku(0x2B);
 8000f1c:	202b      	movs	r0, #43	; 0x2b
 8000f1e:	f7ff ff95 	bl	8000e4c <spi_oku>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <main+0x70>)
 8000f28:	801a      	strh	r2, [r3, #0]
	  z_data = spi_oku(0x2D);
 8000f2a:	202d      	movs	r0, #45	; 0x2d
 8000f2c:	f7ff ff8e 	bl	8000e4c <spi_oku>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <main+0x74>)
 8000f36:	801a      	strh	r2, [r3, #0]

	  sprintf(str , "x_data = %d \n""y_data = %d \n""z_data = %d \n",x_data,y_data,z_data);
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <main+0x6c>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <main+0x70>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <main+0x74>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4908      	ldr	r1, [pc, #32]	; (8000f70 <main+0x78>)
 8000f4e:	4809      	ldr	r0, [pc, #36]	; (8000f74 <main+0x7c>)
 8000f50:	f000 fa14 	bl	800137c <siprintf>

	  USART_Puts(USART1,str);
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <main+0x7c>)
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <main+0x80>)
 8000f58:	f7ff fe6c 	bl	8000c34 <USART_Puts>
	  delay(10000000L);
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <main+0x84>)
 8000f5e:	f7ff fe59 	bl	8000c14 <delay>
	  x_data = spi_oku(0x28);
 8000f62:	e7d4      	b.n	8000f0e <main+0x16>
 8000f64:	200000ee 	.word	0x200000ee
 8000f68:	200000ba 	.word	0x200000ba
 8000f6c:	200000b8 	.word	0x200000b8
 8000f70:	08001408 	.word	0x08001408
 8000f74:	200000bc 	.word	0x200000bc
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	00989680 	.word	0x00989680

08000f80 <EVAL_AUDIO_TransferComplete_CallBack>:
}




void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000f8a:	bf00      	nop
}
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fae:	e003      	b.n	8000fb8 <LoopCopyDataInit>

08000fb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fb6:	3104      	adds	r1, #4

08000fb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fc0:	d3f6      	bcc.n	8000fb0 <CopyDataInit>
  ldr  r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fc4:	e002      	b.n	8000fcc <LoopFillZerobss>

08000fc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc8:	f842 3b04 	str.w	r3, [r2], #4

08000fcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fd0:	d3f9      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fd2:	f000 f841 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f000 f9e7 	bl	80013a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff ff8d 	bl	8000ef8 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fe4:	08001438 	.word	0x08001438
  ldr  r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fec:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8000ff0:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8000ff4:	200000f0 	.word	0x200000f0

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>

08000ffa <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800100c:	e7fe      	b.n	800100c <HardFault_Handler+0x4>

0800100e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001012:	e7fe      	b.n	8001012 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001018:	e7fe      	b.n	8001018 <BusFault_Handler+0x4>

0800101a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800101e:	e7fe      	b.n	800101e <UsageFault_Handler+0x4>

08001020 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <SystemInit+0x60>)
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <SystemInit+0x60>)
 8001060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800106c:	4a13      	ldr	r2, [pc, #76]	; (80010bc <SystemInit+0x64>)
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <SystemInit+0x64>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <SystemInit+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <SystemInit+0x64>)
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <SystemInit+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <SystemInit+0x64>)
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <SystemInit+0x68>)
 8001092:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <SystemInit+0x64>)
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <SystemInit+0x64>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <SystemInit+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80010a6:	f000 f80d 	bl	80010c4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010aa:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <SystemInit+0x60>)
 80010ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b0:	609a      	str	r2, [r3, #8]
#endif
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	40023800 	.word	0x40023800
 80010c0:	24003010 	.word	0x24003010

080010c4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80010d2:	4a36      	ldr	r2, [pc, #216]	; (80011ac <SetSysClock+0xe8>)
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <SetSysClock+0xe8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <SetSysClock+0xe8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3301      	adds	r3, #1
 80010ec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <SetSysClock+0x38>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010fa:	d1f0      	bne.n	80010de <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <SetSysClock+0xe8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001108:	2301      	movs	r3, #1
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	e001      	b.n	8001112 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d142      	bne.n	800119e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001118:	4a24      	ldr	r2, [pc, #144]	; (80011ac <SetSysClock+0xe8>)
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <SetSysClock+0xe8>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001124:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <SetSysClock+0xec>)
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <SetSysClock+0xec>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <SetSysClock+0xe8>)
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <SetSysClock+0xe8>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001138:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <SetSysClock+0xe8>)
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <SetSysClock+0xe8>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001142:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <SetSysClock+0xe8>)
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <SetSysClock+0xe8>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800114e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <SetSysClock+0xe8>)
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <SetSysClock+0xf0>)
 8001154:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <SetSysClock+0xe8>)
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <SetSysClock+0xe8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001160:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001162:	bf00      	nop
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <SetSysClock+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f9      	beq.n	8001164 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <SetSysClock+0xf4>)
 8001172:	f240 6205 	movw	r2, #1541	; 0x605
 8001176:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001178:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <SetSysClock+0xe8>)
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <SetSysClock+0xe8>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f023 0303 	bic.w	r3, r3, #3
 8001182:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <SetSysClock+0xe8>)
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <SetSysClock+0xe8>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001190:	bf00      	nop
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SetSysClock+0xe8>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b08      	cmp	r3, #8
 800119c:	d1f9      	bne.n	8001192 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40007000 	.word	0x40007000
 80011b4:	07405408 	.word	0x07405408
 80011b8:	40023c00 	.word	0x40023c00

080011bc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80011cc:	e004      	b.n	80011d8 <ts_itoa+0x1c>
		div *= base;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d2f3      	bcs.n	80011ce <ts_itoa+0x12>

	while (div != 0)
 80011e6:	e029      	b.n	800123c <ts_itoa+0x80>
	{
		int num = d/div;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80011fa:	fb02 f201 	mul.w	r2, r2, r1
 80011fe:	1a9b      	subs	r3, r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	fb92 f3f3 	sdiv	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b09      	cmp	r3, #9
 8001210:	dd0a      	ble.n	8001228 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	1c59      	adds	r1, r3, #1
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	6011      	str	r1, [r2, #0]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	3237      	adds	r2, #55	; 0x37
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e009      	b.n	800123c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1c59      	adds	r1, r3, #1
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	6011      	str	r1, [r2, #0]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	3230      	adds	r2, #48	; 0x30
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1d2      	bne.n	80011e8 <ts_itoa+0x2c>
	}
}
 8001242:	bf00      	nop
 8001244:	371c      	adds	r7, #28
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b088      	sub	sp, #32
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800125e:	e07d      	b.n	800135c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b25      	cmp	r3, #37	; 0x25
 8001266:	d171      	bne.n	800134c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3301      	adds	r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d01e      	beq.n	80012b4 <ts_formatstring+0x66>
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	dc06      	bgt.n	8001288 <ts_formatstring+0x3a>
 800127a:	2b58      	cmp	r3, #88	; 0x58
 800127c:	d050      	beq.n	8001320 <ts_formatstring+0xd2>
 800127e:	2b63      	cmp	r3, #99	; 0x63
 8001280:	d00e      	beq.n	80012a0 <ts_formatstring+0x52>
 8001282:	2b25      	cmp	r3, #37	; 0x25
 8001284:	d058      	beq.n	8001338 <ts_formatstring+0xea>
 8001286:	e05d      	b.n	8001344 <ts_formatstring+0xf6>
 8001288:	2b73      	cmp	r3, #115	; 0x73
 800128a:	d02b      	beq.n	80012e4 <ts_formatstring+0x96>
 800128c:	2b73      	cmp	r3, #115	; 0x73
 800128e:	dc02      	bgt.n	8001296 <ts_formatstring+0x48>
 8001290:	2b69      	cmp	r3, #105	; 0x69
 8001292:	d00f      	beq.n	80012b4 <ts_formatstring+0x66>
 8001294:	e056      	b.n	8001344 <ts_formatstring+0xf6>
 8001296:	2b75      	cmp	r3, #117	; 0x75
 8001298:	d037      	beq.n	800130a <ts_formatstring+0xbc>
 800129a:	2b78      	cmp	r3, #120	; 0x78
 800129c:	d040      	beq.n	8001320 <ts_formatstring+0xd2>
 800129e:	e051      	b.n	8001344 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60fa      	str	r2, [r7, #12]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	1d11      	adds	r1, r2, #4
 80012aa:	6079      	str	r1, [r7, #4]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]
				break;
 80012b2:	e047      	b.n	8001344 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1d1a      	adds	r2, r3, #4
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da07      	bge.n	80012d4 <ts_formatstring+0x86>
					{
						val *= -1;
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	425b      	negs	r3, r3
 80012c8:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	60fa      	str	r2, [r7, #12]
 80012d0:	222d      	movs	r2, #45	; 0x2d
 80012d2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80012d4:	69f9      	ldr	r1, [r7, #28]
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	220a      	movs	r2, #10
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff6d 	bl	80011bc <ts_itoa>
				}
				break;
 80012e2:	e02f      	b.n	8001344 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	1d1a      	adds	r2, r3, #4
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80012ee:	e007      	b.n	8001300 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	60fa      	str	r2, [r7, #12]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	1c51      	adds	r1, r2, #1
 80012fa:	61b9      	str	r1, [r7, #24]
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f3      	bne.n	80012f0 <ts_formatstring+0xa2>
					}
				}
				break;
 8001308:	e01c      	b.n	8001344 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	1d1a      	adds	r2, r3, #4
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	220a      	movs	r2, #10
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff4f 	bl	80011bc <ts_itoa>
				break;
 800131e:	e011      	b.n	8001344 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	1d1a      	adds	r2, r3, #4
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	2210      	movs	r2, #16
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff43 	bl	80011bc <ts_itoa>
				break;
 8001336:	e005      	b.n	8001344 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60fa      	str	r2, [r7, #12]
 800133e:	2225      	movs	r2, #37	; 0x25
 8001340:	701a      	strb	r2, [r3, #0]
				  break;
 8001342:	bf00      	nop
			}
			fmt++;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3301      	adds	r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	e007      	b.n	800135c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60fa      	str	r2, [r7, #12]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	1c51      	adds	r1, r2, #1
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	f47f af7d 	bne.w	8001260 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	461a      	mov	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	1ad3      	subs	r3, r2, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800137c:	b40e      	push	{r1, r2, r3}
 800137e:	b580      	push	{r7, lr}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	69f9      	ldr	r1, [r7, #28]
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff5c 	bl	800124e <ts_formatstring>
 8001396:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8001398:	68fb      	ldr	r3, [r7, #12]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013a4:	b003      	add	sp, #12
 80013a6:	4770      	bx	lr

080013a8 <__libc_init_array>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	4e0d      	ldr	r6, [pc, #52]	; (80013e0 <__libc_init_array+0x38>)
 80013ac:	4c0d      	ldr	r4, [pc, #52]	; (80013e4 <__libc_init_array+0x3c>)
 80013ae:	1ba4      	subs	r4, r4, r6
 80013b0:	10a4      	asrs	r4, r4, #2
 80013b2:	2500      	movs	r5, #0
 80013b4:	42a5      	cmp	r5, r4
 80013b6:	d109      	bne.n	80013cc <__libc_init_array+0x24>
 80013b8:	4e0b      	ldr	r6, [pc, #44]	; (80013e8 <__libc_init_array+0x40>)
 80013ba:	4c0c      	ldr	r4, [pc, #48]	; (80013ec <__libc_init_array+0x44>)
 80013bc:	f000 f818 	bl	80013f0 <_init>
 80013c0:	1ba4      	subs	r4, r4, r6
 80013c2:	10a4      	asrs	r4, r4, #2
 80013c4:	2500      	movs	r5, #0
 80013c6:	42a5      	cmp	r5, r4
 80013c8:	d105      	bne.n	80013d6 <__libc_init_array+0x2e>
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013d0:	4798      	blx	r3
 80013d2:	3501      	adds	r5, #1
 80013d4:	e7ee      	b.n	80013b4 <__libc_init_array+0xc>
 80013d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013da:	4798      	blx	r3
 80013dc:	3501      	adds	r5, #1
 80013de:	e7f2      	b.n	80013c6 <__libc_init_array+0x1e>
 80013e0:	08001430 	.word	0x08001430
 80013e4:	08001430 	.word	0x08001430
 80013e8:	08001430 	.word	0x08001430
 80013ec:	08001434 	.word	0x08001434

080013f0 <_init>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr

080013fc <_fini>:
 80013fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fe:	bf00      	nop
 8001400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001402:	bc08      	pop	{r3}
 8001404:	469e      	mov	lr, r3
 8001406:	4770      	bx	lr
